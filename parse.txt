
// FENdata parseFEN(const char *fenString) {
//   FENdata data;
//   int rank = 7, file = 0;
//   int i = 0;

//   while (*fenString && *fenString != ' ') {
//     if (*fenString == '/') {
//       rank--;
//       file = 0;
//     } else if (*fenString >= '1' && *fenString <= '8') {
//       int emptySquares = *fenString - '0'; // this is to convert char to int
//       for (int j = 0; j < emptySquares; j++) {
//         data.board[rank][file++] = ' ';
//       }
//     } else {
//       data.board[rank][file++] = *fenString;
//     }
//     fenString++;
//   }

//   fenString++;
//   data.activeColor = *fenString++;

//   fenString++;
//   for (i = 0; *fenString != ' '; i++) {
//     data.castling[i] = *fenString;
//     fenString++;
//   }
//   data.castling[i] = '\0';

//   fenString++;
//   for (i = 0; *fenString != ' '; i++) {
//     data.enPassant[i] = *fenString;
//     fenString++;
//   }
//   data.enPassant[i] = '\0';

//   fenString++;
//   sscanf(fenString, "%d", &data.halfmoveClock);
//   while (*fenString != ' ')
//     fenString++;

//   fenString++;
//   sscanf(fenString, "%d", &data.fullmoveNumber);
//   while (*fenString != ' ')
//     fenString++;

//   return data;
// }
//----------------------------------------
// const char *fenString =
//     "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 99 12";
// FENdata data = parseFEN(fenString);
// for (int i = 7; i >= 0; i--) {
//   for (int j = 7; j >= 0; j--) {
//     cout << data.board[i][j];
//   }
//   cout << endl;
// }
// cout << "active color" << data.activeColor << endl;
// cout << "castling" << data.castling << endl;
// cout << "en passant" << data.enPassant << endl;
// cout << "halfmove clock" << data.halfmoveClock << endl;
// cout << "fullmove number" << data.fullmoveNumber << endl;

// return 0;  // const char *fenString =
  //     "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 99 12";
  // FENdata data = parseFEN(fenString);
  // for (int i = 7; i >= 0; i--) {
  //   for (int j = 7; j >= 0; j--) {
  //     cout << data.board[i][j];
  //   }
  //   cout << endl;
  // }
  // cout << "active color" << data.activeColor << endl;
  // cout << "castling" << data.castling << endl;
  // cout << "en passant" << data.enPassant << endl;
  // cout << "halfmove clock" << data.halfmoveClock << endl;
  // cout << "fullmove number" << data.fullmoveNumber << endl;

  // return 0;

//--------------------------------

  // typedef struct {
  //   char board[8][8];
  //   char activeColor;
  //   char castling[5];
  //   char enPassant[3];
  //   int halfmoveClock;
  //   int fullmoveNumber;
  // } FENdata;






--------------------------------------------------------
  move=moves[0];
  if (isalpha(move[0])) {
    int row = move[move.length()-1]-1;
    int column = charToIndex(move[move.length()-2]);

    switch (move[0]) {
      case 'N':

        if (blastKnight1[0]==-1){
          if (row==5 && column==0||row==5 && column ==2){
            blastKnight1[0]= 7;
            blastKnight1[1]=1;
          }
        }
          if(blastKnight2[0]==-1){
            if (row==5 && column==5||row==5 && column ==7){
              blastKnight2[0]= 7;
              blastKnight2[1]=5;
            }
        }

        if (move.length()==3 || move.find('x') != std::string::npos){

          if (isValidKnightMove(blastKnight1[0], blastKnight1[1], row, column)){
            prev_row = blastKnight1[0];
            prev_column = blastKnight1[1];
          }
          else{
            prev_row = blastKnight2[0];
            prev_column = blastKnight2[1];
          }
        }
        else{
          if (isalpha(move[1])){
            prev_column = charToIndex(move[1]);
            if (blastKnight1[1] == prev_column){
              prev_row = blastKnight1[0];
            }
            else{
              prev_row = blastKnight2[0];
            }
          }
          else{
            prev_row = move[0];
            if (blastKnight1[0] == prev_row){
              prev_column = blastKnight1[1];
            }
            else{
              prev_column = blastKnight2[1];
            }
          }
        }
      case 'B':
        if(row+column%2==0){
          if (blastBishopw[0] == -1){
            prev_row = 0;
            prev_column = 2;
          }
          else{
            prev_row=blastBishopw[0];
            prev_column = blastBishopw[1];
          }
        }
        else{
          if (blastBishopw[0] == -1){
            prev_row = 0;
            prev_column = 5;
          }
          else{
            prev_row=blastBishopb[0];
            prev_column = blastBishopb[1];
          }
        }
        break;
      case 'R':
        if (move.length()==4){

          if (isalpha(move[1])){
            prev_column = charToIndex(move[1]);
            if (blastRook1[1] == prev_column){
              blastRook1[0] = row;
            }
            else{
              blastRook1[0] = row;
            }
          }
          else{
            prev_row = move[1];
            if (blastRook1[0] == prev_row){
              blastRook1[1] = column;
            }
            else{
              blastRook1[1] = column;
            }
          }
        }
        if (blastRook1[0] == -1){
          prev_row = 0;
          prev_column = 2;
        }

        break;
      case 'Q':
        if (blastQueen[0] == -1){
          prev_row = 0;
          prev_column = 3;
        }
        else{
          prev_row=blastQueen[0];
          prev_column = blastQueen[1];
        }
        break;
      case 'K':
        if (blastKing[0] == -1){
          prev_row = 0;
          prev_column = 4;
        }
        else{
          prev_row=blastKing[0];
          prev_column = blastKing[1];
        }
        break;
      default:
        prev_row = row-1;
        if (move.length() == 4){
          if (charToIndex(move[0])>column){
            prev_column = column - 1;
          }
          else{
            prev_column = column + 1;
          }
        }
        else{
          prev_column = column;
        }
    }
  }